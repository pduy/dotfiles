set nocompatible              " be iMproved, required
filetype off                  " required

"" All of your Plugins must be added before the following line
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this lineset nocompatible              " be iMproved, required
filetype on " required

set shellslash
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

"Plugin 'Valloric/YouCompleteMe'

Plugin 'derekwyatt/vim-scala'

Plugin 'neoclide/coc.nvim', {'pinned': 1, 'branch': 'release'}

Plugin 'fannheyward/coc-pyright'

Plugin 'scalameta/nvim-metals'

Plugin 'scrooloose/nerdtree'

Plugin 'lervag/vimtex'
Plugin 'scrooloose/nerdcommenter'

" Track the engine.
Plugin 'SirVer/ultisnips'
"
" " Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

Plugin 'nvie/vim-flake8'

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

Plugin 'maksimr/vim-jsbeautify'

Plugin 'vim-javascript'

Plugin 'tpope/vim-surround'

Plugin 'benmills/vimux'

Plugin 'Yggdroot/indentLine'

Plugin 'fisadev/vim-isort'

"Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'tpope/vim-markdown'

Plugin 'vim-pandoc/vim-rmarkdown'

"Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

"let g:powerline_pycmd = "py3"

"markdown config
let g:markdown_fenced_languages = ['html', 'python', 'scala', 'bash=sh']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100

"
" " Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:ultisnips_python_style="google"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
syntax on
set number
set backspace=indent,eol,start " backspace over everything in insert mode
set background=dark
" colorscheme solarized
colorscheme gruvbox
set softtabstop=4
set shiftwidth=4
autocmd FileType html setlocal shiftwidth=4 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=4 softtabstop=4
autocmd FileType r setlocal shiftwidth=2 softtabstop=2
autocmd FileType tex setlocal shiftwidth=4 softtabstop=4
autocmd FileType scala setlocal shiftwidth=2 softtabstop=2
autocmd FileType cpp setlocal shiftwidth=4 softtabstop=4
autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2
autocmd FileType md setlocal shiftwidth=4 softtabstop=4
autocmd FileType json setlocal shiftwidth=4 softtabstop=4
set ic

" Different cursors between Insert and Normal modes
if has("autocmd")
	au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' |
	au InsertEnter,InsertChange *
		\ if v:insertmode == 'i' |
		\   silent execute '!echo -ne "\e[6 q"' |
		\ elseif v:insertmode == 'r' |
		\   silent execute '!echo -ne "\e[4 q"' |
		\ endif
	au VimLeave * silent execute '!echo -ne "\e[ q"' |
endif

set ttimeout
set ttimeoutlen=1
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
set ttyfast

map <C-n> :NERDTreeToggle<CR>
set t_Co=256
"set clipboard+=unnamed

" This is for automatic text wrapping
"set tw=100
"set fo?
"set fo+=t
"set fo-=l
"set colorcolumn=+1
set colorcolumn=100

" vimtex config
let g:vimtex_view_method='zathura'
let g:vimtex_view_general_viewer = 'zathura'
"let g:vimtex_compiler_latexmk = {
			"\ 'executable' : 'latexmk',
			"\ 'options' : [
			"\   '-pdf',
			"\   '-synctex=1'
			"\ ],
			"\}
let g:vimtex_compiler_latexmk = {
        \ 'backend' : 'jobs',
        \ 'background' : 1,
        \ 'build_dir' : '',
        \ 'callback' : 1,
        \ 'continuous' : 1,
        \ 'executable' : 'latexmk',
	\ 'options' : [
	\   '-pdf',
	\   '-verbose',
	\   '-file-line-error',
	\   '-synctex=1',
	\   '-interaction=nonstopmode',
        \ ],
        \}

let g:ycm_path_to_python_interpreter="/usr/bin/python3"
let g:ycm_python_binary_path="/usr/bin/python3"
let g:ycm_filetype_blacklist={"python": 1, "scala": 1, "sh": 1, "json": 1}
let g:ycm_filetype_specific_completion_to_disable={"python": 1, "scala": 1, "sh": 1, "json": 1}

set belloff=all
set noerrorbells
set visualbell t_vb =
set novisualbell
set spell

set rtp+=~/.fzf

autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

" Auto start NERDTree when opening vim with no arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Run the current file with rspec
map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>
map <Leader>rpy :call VimuxRunCommand("clear; python " . bufname("%"))<CR>
map <Leader>rpyt :call VimuxRunCommand("clear; pytest " . bufname("%"))<CR>
" Run command without sending a return
map <Leader>rq :call VimuxRunCommand("clear; rspec " . bufname("%"), 0)<CR>

set relativenumber

set incsearch

set conceallevel=0

set statusline+=%F
set laststatus=2

noremap <C-C> :set hlsearch!<cr>

nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>? :History<CR>

noremap <C-l> :Autoformat<CR>

nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterToggle<CR>gv

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" configure ctags
set tags=./tags;,tags;

set splitright

"let g:formatdef_scalafmt = '"scalafmt --stdin 2>/dev/null"'
"let g:formatters_scala = ['scalafmt']

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"tab navigations
nnoremap <M-h> gT
nnoremap <M-l> gt

" quick save
noremap <C-S> :update<CR>

" remove trailing whitespaces when saving
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

"autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
